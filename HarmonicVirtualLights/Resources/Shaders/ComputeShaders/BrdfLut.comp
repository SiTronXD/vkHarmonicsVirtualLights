#version 450

#define TEX_SIZE 512
#define SAMPLE_COUNT 1024u
#define PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba16f) uniform image2D lutTexture;

float radicalInverseVdc(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), radicalInverseVdc(i));
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	//float a = roughness; // (Epic games recommends squaring roughness)
	float a = roughness*roughness;

	float phi = 2.0f * PI * Xi.x;
	float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a*a - 1.0f) * Xi.y));
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

	// Point on sphere
	vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

	// Orthonormal basis
	vec3 up = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	// Transform from tangent space to world space
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

float geometrySchlickGGX(float NdotV, float roughness)
{
	float r = roughness;
	float k = r * r * 0.5f; // (k value for IBL)

	float num = NdotV;
	float denom = NdotV * (1.0f - k) + k;

	return num / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0f);
	float NdotL = max(dot(N, L), 0.0f);
	float ggx1 = geometrySchlickGGX(NdotV, roughness);
	float ggx2 = geometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

vec2 integrateBRDF(float NdotV, float roughness)
{
	vec3 V = vec3(1.0f - NdotV * NdotV, 0.0f, NdotV);

	float A = 0.0f;
	float B = 0.0f;

	vec3 N = vec3(0.0f, 0.0f, 1.0f);

	// The fresnel-schlick approximation is integrated within this method
	for(uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		vec2 Xi = hammersley(i, SAMPLE_COUNT);
		vec3 H = importanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize(2.0f * dot(V, H) * H - V);

		float NdotL = max(L.z, 0.0f);
		float NdotH = max(H.z, 0.0f);
		float VdotH = max(dot(V, H), 0.0f);

		if(NdotL > 0.0f)
		{
			float G = geometrySmith(N, V, L, roughness);
			float GVis = (G * VdotH) / (NdotH * NdotV);
			float Fc = pow(1.0f - VdotH, 5.0f);

			A += (1.0f - Fc) * GVis;
			B += Fc * GVis;
		}
	}

	A /= float(SAMPLE_COUNT);
	B /= float(SAMPLE_COUNT);
	return vec2(A, B);
}

void main()
{
	uvec2 index = gl_GlobalInvocationID.xy;
	vec2 uv = (vec2(index) + vec2(0.5f)) / vec2(TEX_SIZE);

	// Write color
	vec3 color = vec3(integrateBRDF(uv.x, uv.y), 0.0f);
	imageStore(lutTexture, ivec2(index), vec4(color, 1.0f));
}
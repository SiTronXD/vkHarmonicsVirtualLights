#version 450

#define SAMPLE_COUNT 1024u
#define PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0) uniform samplerCube environmentMap;
layout (binding = 1, rgba16f) uniform imageCube prefilteredMap;

layout(push_constant) uniform PushConstantData
{
	uvec4 resolution;
	vec4 roughness;
} pc;

float radicalInverseVdc(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), radicalInverseVdc(i));
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	//float a = roughness; // (Epic games recommends squaring roughness)
	float a = roughness*roughness;

	float phi = 2.0f * PI * Xi.x;
	float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a*a - 1.0f) * Xi.y));
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

	// Point on sphere
	vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

	// Orthonormal basis
	vec3 up = abs(N.z) < 1.0f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f); // This can cause odd rotations right around the Z axis
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	// Transform from tangent space to world space
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

float distributionGGX(vec3 N, vec3 H, float roughness)
{
	//float a = roughness; // (Epic games recommends squaring roughness)
	float a = roughness * roughness;
	float a2 = a * a;
	float NdotH = max(dot(N, H), 0.0f);
	float NdotH2 = NdotH * NdotH;

	float num = a2;
	float denom = NdotH2 * (a2 - 1.0f) + 1.0f;
	denom = PI * denom * denom;

	return num / denom;
}

vec3 indexToWorldPos(uvec3 index)
{
	// UV [-1, 1]
	vec2 uv = (vec2(index.xy) + vec2(0.5f)) / vec2(pc.resolution.zw) * 2.0f - vec2(1.0f);
	switch(index.z)
	{
		case 0: return vec3( 1.0f, -uv.y, -uv.x);
		case 1: return vec3(-1.0f, -uv.y,  uv.x);
		case 2: return vec3( uv.x,  1.0f,  uv.y);
		case 3: return vec3( uv.x, -1.0f, -uv.y);
		case 4: return vec3( uv.x, -uv.y,  1.0f);
		case 5: return vec3(-uv.x, -uv.y, -1.0f);
	}

	return vec3(-1.0f);
}

void main()
{
	uvec3 index = gl_GlobalInvocationID.xyz;
	if(index.x >= pc.resolution.z || index.y >= pc.resolution.w)
		return;

	vec3 N = normalize(indexToWorldPos(index));
	float roughness = pc.roughness.x;

	// Presumptions for approximation
	vec3 R = N;
	vec3 V = R;

	float totalWeight = 0.0f;
	vec3 prefilteredColor = vec3(0.0f);
	for(uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		vec2 Xi = hammersley(i, SAMPLE_COUNT);
		vec3 H = importanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize(2.0f * dot(V, H) * H - V);

		float NdotL = max(dot(N, L), 0.0f);
		if(NdotL > 0.0f)
		{
			float NdotH = max(dot(N, H), 0.0f);
			float HdotV = max(dot(H, V), 0.0f);

			float D = distributionGGX(N, H, roughness);
			float pdf = D * NdotH / (4.0f * HdotV) + 0.0001f;

			float saTexel = 4.0f * PI / (6.0f * pc.resolution.x * pc.resolution.y);
			float saSample = 1.0f / (float(SAMPLE_COUNT) * pdf + 0.0001f);

			float mipLevel = roughness == 0.0f ? 0.0f : 0.5f * log2(saSample / saTexel);

			prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
			totalWeight += NdotL;
		}
	}
	prefilteredColor /= totalWeight;

	// Write color
	//vec3 prefilteredColor = textureLod(environmentMap, indexToWorldPos(index), 0.0f).rgb;
	imageStore(prefilteredMap, ivec3(index), vec4(prefilteredColor, 1.0f));
}
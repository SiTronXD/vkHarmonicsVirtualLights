#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba16f) uniform image2D hdrImage;
layout (binding = 1, rgba8) uniform image2D swapchainImage;

layout(push_constant) uniform PushConstantData
{
	uvec4 resolution;
} pc;

vec3 toneMap(vec3 x)
{
	// Reinhard
	//return x / (x + vec3(1.0f));

	// ACES
	const float a = 2.51f;
	const float b = 0.03f;
	const float c = 2.43f;
	const float d = 0.59f;
	const float e = 0.14f;
	return (x * (a * x + b)) / (x * (c * x + d) + e);
}

vec3 srgbToLinear(vec3 col)
{
	return pow(col, vec3(2.2f));
}

vec3 linearToSrgb(vec3 col)
{
	return pow(col, vec3(1.0f / 2.2f));
}

void main()
{
	uvec2 index = gl_GlobalInvocationID.xy;

	// Make sure compute work is within bounds
	if(index.x >= pc.resolution.x || index.y >= pc.resolution.y)
		return;

	// Load HDR color
	vec3 color = imageLoad(hdrImage, ivec2(index)).rgb;
	color = max(color, vec3(0.0f));
	
	// Tone mapping and gamma correction
	color = toneMap(color);
	color = linearToSrgb(color);

	// Write color
	color = clamp(color, vec3(0.0f), vec3(1.0f));
	imageStore(swapchainImage, ivec2(index), vec4(color, 1.0f));
}